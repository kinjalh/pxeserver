/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Kinjal' at '7/20/17 5:53 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-log4j12:1.7.22'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'    
}

// Adds 'conf' directory to run task's classpath. The run task does not know that we have a 'conf' directory outside of 'src' folder,
// so this includes the 'conf' directory in the classpath.
// also prints command line
run {
    classpath += files('conf')
    println commandLine
}

// By default, distZip does not include the 'conf' directory when creating the zip distribution. This copies the 'conf' directory
// from the project's root directory to the root directory of the zip distribution.
distZip {
    into(project.name) {
        from '.'
        include 'log'
        include 'conf/*'
        include 'docs/*'
        exclude 'docs/javadoc'
        
    }
}


// Gradle has a bug when generating batch file for distZip. When adding a directory <yourDirectory> to classpath, 
// only the last element of the path is kept, and becomes 'lib/<yourDirectory>'.
// Here, what happens is that we generate a faulty script with 'lib/PXEconfPXE' in the classpath, and then doing a string
// substitution in the batch file to include the 'conf' directory instead of 'lib/PXEconfPXE'. 'PXEconfPXE' is used
// as a substitution pattern which hopefully shouldn't collide with any other directory name.
// See discussion in: https://stackoverflow.com/questions/10518603/adding-classpath-entries-using-gradles-application-plugin
startScripts {
  classpath += files('PXEconfPXE')
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile    = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\PXEconfPXE', '%APP_HOME%\\conf')
    unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/PXEconfPXE', '$APP_HOME/conf')
  }
}

javadoc {
	destinationDir = file('docs/javadoc')
}

mainClassName = 'org.kj.pxe.server.ServerImpl'
apply plugin: 'distribution'
